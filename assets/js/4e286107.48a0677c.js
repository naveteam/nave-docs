"use strict";(self.webpackChunknave_docs=self.webpackChunknave_docs||[]).push([[635],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,o=function(e,a){if(null==e)return{};var t,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),d=function(e){var a=r.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=d(e.components);return r.createElement(u.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var t=e.components,o=e.mdxType,n=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,g=p["".concat(u,".").concat(m)]||p[m]||l[m]||n;return t?r.createElement(g,i(i({ref:a},c),{},{components:t})):r.createElement(g,i({ref:a},c))}));function m(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=t.length,i=new Array(n);i[0]=p;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<n;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4963:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var r=t(7462),o=t(3366),n=(t(7294),t(3905)),i=["components"],s={},u="React Query com TypeScript",d={unversionedId:"tecnologia/guides/react-query-ts",id:"tecnologia/guides/react-query-ts",isDocsHomePage:!1,title:"React Query com TypeScript",description:"Introdu\xe7\xe3o",source:"@site/docs/tecnologia/guides/react-query-ts.md",sourceDirName:"tecnologia/guides",slug:"/tecnologia/guides/react-query-ts",permalink:"/nave-docs/tecnologia/guides/react-query-ts",editUrl:"https://github.com/naveteam/nave-docs/docs/tecnologia/guides/react-query-ts.md",version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Typescript",permalink:"/nave-docs/tecnologia/guides/typescript"},next:{title:"Boilerplates",permalink:"/nave-docs/back-end/guides/boilerplates"}},c=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",children:[]},{value:"Iniciando",id:"iniciando",children:[]},{value:"Formas de adicionar tipagem ao retorno de dados da API",id:"formas-de-adicionar-tipagem-ao-retorno-de-dados-da-api",children:[]},{value:"Trabalhando com pagina\xe7\xe3o e filtros no react-query",id:"trabalhando-com-pagina\xe7\xe3o-e-filtros-no-react-query",children:[]}],l={toc:c};function p(e){var a=e.components,t=(0,o.Z)(e,i);return(0,n.kt)("wrapper",(0,r.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"react-query-com-typescript"},"React Query com TypeScript"),(0,n.kt)("h3",{id:"introdu\xe7\xe3o"},"Introdu\xe7\xe3o"),(0,n.kt)("p",null,"Esse guia vai explicar como utilizar a biblioteca React-query com typescript, visando em detalhes de como passar a tipagem para o retorno dos dados da API e tamb\xe9m utilizar para casos que precisa da pagina\xe7\xe3o."),(0,n.kt)("h3",{id:"iniciando"},"Iniciando"),(0,n.kt)("p",null,"Para come\xe7ar a utilizar a biblioteca em seu projeto, utiliza o mesmo modo de configura\xe7\xe3o como est\xe1 na documenta\xe7\xe3o do React-query, sendo que n\xe3o precisa mudar nada para usar com typescript, ent\xe3o siga o mesmo exemplo no link abaixo:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/quick-start"},"Configura\xe7\xe3o da biblioteca")),(0,n.kt)("h3",{id:"formas-de-adicionar-tipagem-ao-retorno-de-dados-da-api"},"Formas de adicionar tipagem ao retorno de dados da API"),(0,n.kt)("p",null,"A React-query permite que seja adicionado com o generics no hooks que ela disponibiliza ou na fun\xe7\xe3o do axios, mas pode ser adicionado como retorno da fun\xe7\xe3o que faz a chamada do endpoint."),(0,n.kt)("p",null,"Segue os exemplos:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Generics direto no hook do react-query")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'interface PersonProps {\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\nconst PersonComponent = () => {\n  const { data } = useQuery<PersonProps>("personGetter", getPersonData);\n};\n')),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Generics direto na fun\xe7\xe3o do axios")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const getPersonData = () => api.get<PersonProps>(`api/v2/...`);\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Tipagem no retorno da fun\xe7\xe3o do endpoint")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const getPersonData = (): Promise<PersonProps> => api.get(`api/v2/...`);\n")),(0,n.kt)("p",null,"Os tr\xeas formatos funcionam bem para o react-query que ir\xe1 exibir todas as propriedades no intellisense na propriedade ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," desestruturada no ",(0,n.kt)("inlineCode",{parentName:"p"},"useQuery"),", mas o mais indicado a utilizar no projeto, seria a segunda ou a terceira op\xe7\xe3o com o generics ou tipo do retorno direto na fun\xe7\xe3o do endpoint, onde vai alterar em somente um lugar que lida diretamente com a chamada dos dados da API, j\xe1 que podemos utilizar o mesmo endpoint em diversos lugares do projeto."),(0,n.kt)("h3",{id:"trabalhando-com-pagina\xe7\xe3o-e-filtros-no-react-query"},"Trabalhando com pagina\xe7\xe3o e filtros no react-query"),(0,n.kt)("p",null,"Com pagina\xe7\xe3o utilizamos uma fun\xe7\xe3o externa que recebe os valores no array de depend\xeancias do ",(0,n.kt)("inlineCode",{parentName:"p"},"useQuery"),". \xc9 necess\xe1rio tipar esse par\xe2metro na fun\xe7\xe3o para que n\xe3o passe como ",(0,n.kt)("inlineCode",{parentName:"p"},"any"),", o formato da tipagem \xe9 uma tupla. Segue o exemplo de pagina\xe7\xe3o:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Construindo a fun\xe7\xe3o externa para realizar a pagina\xe7\xe3o e filtros:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"interface ParametersGetData {\n  id?: string;\n  filters?: string;\n}\n\ntype QueryKeyProps = [string, ParametersGetData];\n\n// fun\xe7\xe3o externa\nconst getSalesCategories = async ({\n  queryKey,\n}: {\n  queryKey: QueryKeyProps;\n}) => {\n  const { id, filters } = queryKey[1];\n  return salesCategory({ id, filters });\n};\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Esta fun\xe7\xe3o assim que o ",(0,n.kt)("inlineCode",{parentName:"li"},"filters"),", que possui a pagina\xe7\xe3o, for alterada, ela vai ser executada, recebendo os valores do array de depend\xeancias do ",(0,n.kt)("inlineCode",{parentName:"li"},"useQuery"),", que est\xe1 sendo tipado com ",(0,n.kt)("inlineCode",{parentName:"li"},"QueryKeyProps"))),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Na chamada do ",(0,n.kt)("inlineCode",{parentName:"li"},"useQuery"),", utilizar a fun\xe7\xe3o externa")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'const { data: salesCategoriesData } = useQuery(\n  ["salesCategoriesGetter", { id: schoolID, filters: queryString }], //array de depend\xeancias do useQuery\n  getSalesCategories //fun\xe7\xe3o externa acima\n);\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"No array de depend\xeancias, o ",(0,n.kt)("inlineCode",{parentName:"li"},"filters")," recebe a query string que trata todos os filtro e o n\xfamero da p\xe1gina que vai ser enviado para API retornar os dados necess\xe1rios, isso ocorre a cada mudan\xe7a do valor da ",(0,n.kt)("inlineCode",{parentName:"li"},"queryString"),", e assim dispara a execu\xe7\xe3o da fun\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"li"},"getSalesCategories"),"."),(0,n.kt)("li",{parentName:"ul"},"Isso pode ser utilizado para todos os casos de pagina\xe7\xe3o e para outros campos de filtros, facilitando bastante o uso da API.")))}p.isMDXComponent=!0}}]);